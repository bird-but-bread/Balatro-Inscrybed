[manifest]
version = "1.0.0"
dump_lua = true
priority = 5

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''Stake = {},'''
position = 'after'
payload = '''Sigil = {},'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''total = {tally = 0, of = 0},'''
position = 'before'
payload = '''sigils = {tally = 0, of = 0},
'''
match_indent = true

#some sigils utils
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "if (G.P_CENTERS[(card.edition or {}).key] or {}).never_scores then return true end"
position = "before"
payload = '''
if card.sigil ~= nil then
    if card.ability.sigil.never_scores then
        return true
    end
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "if (G.P_CENTERS[(card.edition or {}).key] or {}).always_scores then return true end"
position = "before"
payload = '''
if card.sigil ~= nil then
    if card.ability.sigil.always_scores then
        return true
    end
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "local enhancements = {}"
position = "after"
payload = '''
if card.sigil ~= nil then
    if card.ability.sigil.counts_as_enhance then
        enhancements[card.ability.sigil.counts_as_enhance] = true
    end
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = "local poker_hands = evaluate_poker_hand(_cards)"
position = "before"
payload = '''
cards = {}
for i = 1, #_cards do
    table.insert(cards, _cards[i])
    if _cards[i].sigil ~= nil then
        if _cards[i].ability.sigil.furcated then
            for j = 1, (_cards[i].ability.sigil.furcated-1) do
                table.insert(cards, _cards[i])
            end
        end
    end
end
_cards = {}
for i = 1, #cards do
    table.insert(_cards, cards[i])
end
'''
match_indent = true 

# Card:update()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if G.STAGE == G.STAGES.RUN then'
position = 'before'
match_indent = true
payload = '''
local obj = G.P_SIGILS[self.sigil] or {}
if obj.update and type(obj.update) == 'function' then
    obj:update(self, dt)
end'''

#draw from discard
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.play,G.discard, it*100/play_count,'down', false, v)"
position = "before"
payload = '''
if v.sigil ~= nil and v.ability.sigil.no_discard then
	draw_card(G.play,G.deck, it*100/play_count,'down', false, v)
	G.deck:shuffle('ndis'..G.GAME.round_resets.ante)
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.play,G.discard, it*100/play_count,'down', false, v)"
position = "after"
payload = '''
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = "before"
payload = '''
if G.hand.highlighted[i].sigil ~= nil and G.hand.highlighted[i].ability.sigil.no_discard then
    draw_card(G.hand, G.deck, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
	G.deck:shuffle('ndis'..G.GAME.round_resets.ante)
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = "after"
payload = '''
end
'''
match_indent = true

#extra card draw
[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = "for i=1, hand_space do*"
position = "before"
payload = '''
hand_space = hand_space + G.GAME.insc_extra_draw
G.GAME.insc_extra_draw = 0
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
-- TARGET: main end_of_round evaluation
'''
position = "after"
payload = '''
G.GAME.insc_extra_draw = 0
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.removed = true"
position = "before"
payload = '''
if self.sigil ~= nil and self.ability.sigil.no_destroy ~= nil and self.area then
    if self.ability.sigil.no_destroy[1] and (self.area.config.type == 'deck' or self.area.config.type == 'joker' or self.area.config.type == 'play' or self.area.config.type == 'hand') then
        G.E_MANAGER:add_event(Event({
            func = function()
                self:start_materialize()
                return true
            end
        })) 
        if self.ability.sigil.no_destroy[3] ~= nil then
            self.ability.sigil.no_destroy[3] = self.ability.sigil.no_destroy[3] - 1
            if self.ability.sigil.no_destroy[2] and self.ability.sigil.no_destroy[3] == 0 then
                self.ability.sigil.no_destroy[1] = false
            end 
        elseif self.ability.sigil.no_destroy[2] then
            self.ability.sigil.no_destroy[1] = false
        end
	    return
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.P_LOCKED = {}'''
position = 'after'
payload = '''self.P_SIGILS = {
}'''	
match_indent = true


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''table.sort(self.P_CENTER_POOLS["Seal"], function (a, b) return a.order < b.order end)'''
position = 'after'
payload = '''table.sort(self.P_CENTER_POOLS["Sigil"], function (a, b) return a.order < b.order end)'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''for k, v in pairs(self.P_STAKES) do'''
position = 'before'
payload = '''for k, v in pairs(self.P_SIGILS) do
    v.key = k
    if not v.wip and not v.demo then 
        if TESTHELPER_unlocks then v.discovered = true; v.alerted = true  end --REMOVE THIS
        if not v.discovered and meta.discovered[k] then 
            v.discovered = true
        end
        if v.discovered and meta.alerted[k] then 
            v.alerted = true
        elseif v.discovered then
            v.alerted = false
        end
        table.insert(self.P_CENTER_POOLS['Sigil'], v)
    end
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.FILE_HANDLER = G.FILE_HANDLER or {}'''
position = 'before'
payload = '''for k, v in pairs(self.P_SIGILS) do
    G.ARGS.save_progress.UDA[k] = (v.unlocked and 'u' or '')..(v.discovered and 'd' or '')..(v.alerted and 'a' or '')
end'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.sticker_map = {'''
position = 'before'
payload = '''self.shared_sigils = {
    }'''
match_indent = true

          
            


[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''{n=G.UIT.R, config={id = 'from_game_over', align = "cm", minw = 5, padding = 0.1, r = 0.1, hover = true, colour = G.C.RED, button = "notify_then_setup_run", shadow = true, focus_args = {nav = 'wide', snap_to = true}}, nodes={
            {n=G.UIT.R, config={align = "cm", padding = 0, no_fill = true, maxw = 4.8}, nodes={
              {n=G.UIT.T, config={text = localize('b_start_new_run'), scale = 0.5, colour = G.C.UI.TEXT_LIGHT}}
            }}
          }},'''
position = 'before'
payload = '''{n=G.UIT.R, config={align = "cm", minw = 5, padding = 0.1, r = 0.1, hover = true, colour = G.C.ORANGE, button = "death_card_start", shadow = true, focus_args = {nav = 'wide', snap_to = true}}, nodes={
            {n=G.UIT.R, config={align = "cm", padding = 0, no_fill = true, maxw = 4.8}, nodes={
              {n=G.UIT.T, config={text = localize('b_create_death_card'), scale = 0.5, colour = G.C.UI.TEXT_LIGHT}}
            }}
          }},'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:set_seal(_seal, silent, immediate)'''
position = 'before'
payload = '''function Card:set_sigil(_sigil, silent, immediate)
    self.sigil = nil
    if _sigil then
        self.sigil = _sigil
    self.ability.sigil = {}
    for k, v in pairs(G.P_SIGILS[_sigil].config or {}) do
	    if type(v) == 'table' then
	        self.ability.sigil[k] = copy_table(v)
	    else
	        self.ability.sigil[k] = v
	    end
  	end
    end
    self:set_cost()
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:calculate_seal(context)'''
position = 'before'
payload = '''function Card:calculate_sigil(context)
if self.debuff then return nil end    local obj = G.P_SIGILS[self.sigil] or {}
    if obj.calculate and type(obj.calculate) == 'function' then
        local o = obj:calculate(self, context)
        if o then
            if not o.card then o.card = self end
            return o
        end
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end'''
position = 'before'
payload = '''if self.sigil then badges[#badges + 1] = string.lower(self.sigil)..'_sigil' end'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''seal = self.seal,'''
position = 'before'
payload = '''sigil = self.sigil,'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if card.seal then
'''
match_indent = true
position = "before"
payload = ''' if card.sigil then
    local sigils = card:calculate_sigil(context)
    if sigils then
        ret.sigils = sigils
    end
end
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''self.seal = cardTable.seal'''
position = 'before'
payload = '''self.sigil = cardTable.sigil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''local seal = G.P_SEALS[v] or G.P_SEALS[SMODS.Seal.badge_to_key[v] or '']'''
position = 'before'
match_indent = true
payload = '''
local sigil = G.P_SIGILS[v] or G.P_SIGILS[BalatroInscrybed.Sigil.badge_to_key[v] or '']
if sigil and sigil.generate_ui ~= 0 then
    local t = { key = v, set = 'Other' }
    info_queue[#info_queue+1] = t
    if sigil.loc_vars and type(sigil.loc_vars) == 'function' then
        local res = sigil:loc_vars(info_queue, card) or {}
        t.vars = res.vars
        t.key = res.key or t.key
    end
end
'''
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Joker' then'''
position = 'before'
match_indent = true
payload = '''
elseif _c.set == 'Sigil' then
    localize{type = 'descriptions', set = 'Other', key = _c.key, nodes = desc_nodes, vars = specific_vars or _c.vars}
'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''new_card:set_seal(other.seal, true)'''
position = 'before'
match_indent = true
payload = '''
   new_card:set_sigil(other.sigil, true)
    if other.sigil then
        for k, v in pairs(other.ability.sigil or {}) do
            if type(v) == 'table' then
                new_card.ability.sigil[k] = copy_table(v)
            else
                new_card.ability.sigil[k] = v
            end
        end
    end

'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''-- TARGET: evaluate your own general effects'''
position = 'before'
match_indent = true
payload = '''
    if card.sigil and not card.ability.extra_enhancement then
        local sigils = card:calculate_sigil(context)
        if sigils then
            ret.sigils = sigils
        end
    end
'''