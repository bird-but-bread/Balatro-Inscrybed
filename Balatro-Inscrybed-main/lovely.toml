[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''Stake = {},'''
position = 'after'
payload = '''Sigil = {},'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''total = {tally = 0, of = 0},'''
position = 'before'
payload = '''sigils = {tally = 0, of = 0},
'''
match_indent = true




[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.P_LOCKED = {}'''
position = 'after'
payload = '''self.P_SIGILS = {
}'''	
match_indent = true


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''table.sort(self.P_CENTER_POOLS["Seal"], function (a, b) return a.order < b.order end)'''
position = 'after'
payload = '''table.sort(self.P_CENTER_POOLS["Sigil"], function (a, b) return a.order < b.order end)'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''for k, v in pairs(self.P_STAKES) do'''
position = 'before'
payload = '''for k, v in pairs(self.P_SIGILS) do
    v.key = k
    if not v.wip and not v.demo then 
        if TESTHELPER_unlocks then v.discovered = true; v.alerted = true  end --REMOVE THIS
        if not v.discovered and meta.discovered[k] then 
            v.discovered = true
        end
        if v.discovered and meta.alerted[k] then 
            v.alerted = true
        elseif v.discovered then
            v.alerted = false
        end
        table.insert(self.P_CENTER_POOLS['Sigil'], v)
    end
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.FILE_HANDLER = G.FILE_HANDLER or {}'''
position = 'before'
payload = '''for k, v in pairs(self.P_SIGILS) do
    G.ARGS.save_progress.UDA[k] = (v.unlocked and 'u' or '')..(v.discovered and 'd' or '')..(v.alerted and 'a' or '')
end'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.sticker_map = {'''
position = 'before'
payload = '''self.shared_sigils = {
    }'''
match_indent = true

          
            

[[patches]]
[patches.pattern]
target = 'common_events.lua'
pattern = '''  if G.P_CENTERS['e_'..v] and G.P_CENTERS['e_'..v].set == 'Edition' then'''
position = 'before'
payload = ''' local sigil = SMODS.Sigils[v] or SMODS.Sigil.badge_to_key[v] and SMODS.Sigils[SMODS.Sigil.badge_to_key[v]]
            if sigil and sigil.generate_ui ~= 0 then
            	local t = { key = v, set = 'Other' }
            	info_queue[#info_queue+1] = t
            	if sigil.loc_vars and type(sigil.loc_vars) == 'function' then
            		local res = sigil:loc_vars(info_queue, card) or {}
            		t.vars = res.vars
            		t.key = res.key or t.key
                    t.set = res.set or t.set
            	end
            end
'''
match_indent = true




[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local seal = G.P_SEALS[self.seal or {}] or {}'''
position = 'before'
payload = '''local sigil = G.P_SIGILS[self.sigil or {}] or {}
                if type(sigil.draw) == 'function' then
                    sigil:draw(self, layer)
                elseif self.sigil then
                    G.shared_sigils[self.sigil].role.draw_major = self
                    G.shared_sigils[self.sigil]:draw_shader('dissolve', nil, nil, nil, self.children.center)
                    if self.sigil == 'Gold' then G.shared_sigils[self.sigil]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center) end
                end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:set_seal(_seal, silent, immediate)'''
position = 'before'
payload = '''function Card:set_sigil(_sigil, silent, immediate)
    self.sigil = nil
    if _sigil then
        self.sigil = _sigil
	self.ability.sigil = {}
	for k, v in pairs(G.P_SIGILS[_sigil].config or {}) do
	    if type(v) == 'table' then
	        self.ability.sigil[k] = copy_table(v)
	    else
	        self.ability.sigil[k] = v
	    end
  	end
        if not silent then 
        G.CONTROLLER.locks.sigil = true
            if immediate then 
                self:juice_up(0.3, 0.3)
                play_sound('gold_seal', 1.2, 0.4)
                G.CONTROLLER.locks.sigil = false
            else
                G.E_MANAGER:add_event(Event({
                    trigger = 'after',
                    delay = 0.3,
                    func = function()
                        self:juice_up(0.3, 0.3)
                        play_sound('gold_seal', 1.2, 0.4)
                    return true
                    end
                }))
                G.E_MANAGER:add_event(Event({
                    trigger = 'after',
                    delay = 0.15,
                    func = function()
                        G.CONTROLLER.locks.sigil = false
                    return true
                    end
                }))
            end
        end
    end
    self:set_cost()
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:calculate_seal(context)'''
position = 'before'
payload = '''function Card:calculate_sigil(context, key)
    local sigil = SMODS.Sigils[key]
    if self.ability[key] and type(sigil.calculate) == 'function' then
        local o = sigil:calculate(self, context)
        if o then
            if not o.card then o.card = self end
            return o
        end
    end
end'''
match_indent = true

